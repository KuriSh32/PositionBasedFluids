#version 430 core

layout(local_size_x = 256) in;

layout(std430, binding = 1) buffer PositionPredict {
    vec4 positionPredict[];
};

layout(std430, binding = 2) buffer Velocity {
    vec4 velocity[];
};

layout(std430, binding = 7) buffer NeighborCountPerParticle {
    uint neighborCountPerParticle[];
};

layout(std430, binding = 8) buffer NeighborIndexBuffer {
    uint neighborIndexBuffer[];
};

uniform uint MAX_NEIGHBOR_COUNT;
uniform float KERNEL_RADIUS;
uniform float VISCOSITY_PARAMETER;
uniform float REST_DENSITY_REVERSE;
uniform float PI;
uniform uint PARTICLE_COUNT;

float Poly6(vec3 r, float h) {
    float h2 = h * h;
    float r2 = dot(r, r);
    if (r2 > h2) {
        return 0.0;
    }
    else {
        float fac1 = 315.0 / (64.0 * PI * pow(h, 9));
        float fac2 = pow(h2 - r2, 3);
        return fac1 * fac2;
    }
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT) {
        return;
    }

    vec3 deltaVelocity = vec3(0.0);
    for (uint i = 0; i < neighborCountPerParticle[index]; i++) {
        uint neighborIndex = neighborIndexBuffer[index * MAX_NEIGHBOR_COUNT + i];
        deltaVelocity -= vec3(velocity[index] - velocity[neighborIndex]) * Poly6(vec3(positionPredict[index]) - vec3(positionPredict[neighborIndex]), KERNEL_RADIUS);
    }
    vec3 deltaVelocity2 = REST_DENSITY_REVERSE * deltaVelocity;
    velocity[index].xyz += VISCOSITY_PARAMETER * deltaVelocity2;
}
