#version 430 core

layout(local_size_x = 256) in;

layout(std430, binding = 1) buffer PositionPredict {
    vec4 positionPredict[];
};

layout(std430, binding = 2) buffer Velocity {
    vec4 velocity[];
};

layout(std430, binding = 7) buffer NeighborCountPerParticle {
    uint neighborCountPerParticle[];
};

layout(std430, binding = 8) buffer NeighborIndexBuffer {
    uint neighborIndexBuffer[];
};

layout(std430, binding = 16) buffer Curl {
    vec4 curl[];
};

layout(std430, binding = 17) buffer CurlX {
    vec4 curlX[];
};

layout(std430, binding = 18) buffer CurlY {
    vec4 curlY[];
};

layout(std430, binding = 19) buffer CurlZ {
    vec4 curlZ[];
};  

uniform float KERNEL_RADIUS;
uniform uint MAX_NEIGHBOR_COUNT;
uniform float PI;
uniform uint PARTICLE_COUNT;

vec3 SpikyGradient(vec3 r, float h) {
    float r_mag = length(r);
    if (r_mag > h) {
        return vec3(0.0);
    }
    else {
        if (r_mag < 0.00001) {
            return vec3(0.0);
        }
        else {
            float fac1 = -45.0 / (PI * pow(h, 6));
            float fac2 = pow(h - r_mag, 2);
            return normalize(r) * fac1 * fac2;
        }
    }
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT) {
        return;
    }
    curl[index] = vec4(0.0);
    curlX[index] = vec4(0.0);
    curlY[index] = vec4(0.0);
    curlZ[index] = vec4(0.0);
    for (uint i = 0; i < neighborCountPerParticle[index]; i++) {
        uint neighborIndex = neighborIndexBuffer[index * MAX_NEIGHBOR_COUNT + i];
        vec3 v_ji = velocity[neighborIndex].xyz - velocity[index].xyz;
        vec3 p_ij = positionPredict[index].xyz - positionPredict[neighborIndex].xyz;
        curl[index].xyz += cross(v_ji, SpikyGradient(p_ij, KERNEL_RADIUS));
        curlX[index].xyz += cross(v_ji, SpikyGradient(p_ij + vec3(0.01, 0.0, 0.0), KERNEL_RADIUS));
        curlY[index].xyz += cross(v_ji, SpikyGradient(p_ij + vec3(0.0, 0.01, 0.0), KERNEL_RADIUS));
        curlZ[index].xyz += cross(v_ji, SpikyGradient(p_ij + vec3(0.0, 0.0, 0.01), KERNEL_RADIUS));
    }
}
