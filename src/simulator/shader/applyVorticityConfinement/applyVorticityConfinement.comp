#version 430 core

layout(local_size_x = 256) in;

layout(std430, binding = 1) buffer PositionPredict {
    vec4 positionPredict[];
};

layout(std430, binding = 2) buffer Velocity {
    vec4 velocity[];
};

layout(std430, binding = 7) buffer NeighborCountPerParticle {
    uint neighborCountPerParticle[];
};

layout(std430, binding = 16) buffer Curl {
    vec4 curl[];
};

layout(std430, binding = 17) buffer CurlX {
    vec4 curlX[];
};

layout(std430, binding = 18) buffer CurlY {
    vec4 curlY[];
};

layout(std430, binding = 19) buffer CurlZ {
    vec4 curlZ[];
};

uniform float KERNEL_RADIUS;
uniform uint MAX_NEIGHBOR_COUNT;
uniform float PI;
uniform float VORTICITY_PARAMETER;
uniform float MASS_REVERSE;
uniform float DELTA_TIME;
uniform uint PARTICLE_COUNT;

vec3 SpikyGradient(vec3 r, float h) {
    float r_mag = length(r);
    if (r_mag > h) {
        return vec3(0.0);
    }
    else {
        if (r_mag < 0.00001) {
            return vec3(0.0);
        }
        else {
            float fac1 = -45.0 / (PI * pow(h, 6));
            float fac2 = pow(h - r_mag, 2);
            return normalize(r) * fac1 * fac2;
        }
    }
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT) {
        return;
    }
    if (!any(isnan(curl[index]))) {
        float curlLength = length(curl[index]);
        vec3 n;
        n.x = length(curlX[index]) - curlLength;
        n.y = length(curlY[index]) - curlLength;
        n.z = length(curlZ[index]) - curlLength;
        n = normalize(n);
        if (!any(isnan(n))) {
            vec3 force = -VORTICITY_PARAMETER * cross(n, vec3(curl[index]));
            velocity[index].xyz += force * DELTA_TIME * MASS_REVERSE;
        }
    }
}
