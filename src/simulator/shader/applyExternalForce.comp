#version 430 core

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer ParticlePositions { vec4 particlePosition[]; };
layout(std430, binding = 1) buffer PositionPredict { vec4 positionPredict[]; };
layout(std430, binding = 2) buffer Velocity { vec4 velocity[]; };

uniform vec3 GRAVITY;
uniform float DELTA_TIME;
uniform float MASS_REVERSE;
uniform uint PARTICLE_COUNT;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT) {
        return;
    }
    velocity[index].xyz += GRAVITY * DELTA_TIME * MASS_REVERSE;
    positionPredict[index].xyz = vec3(particlePosition[index]) + vec3(velocity[index]) * DELTA_TIME;
}