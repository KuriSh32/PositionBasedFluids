#version 430 core

layout(local_size_x = 256) in;

layout(std430, binding = 1) buffer PositionPredict {
    vec4 positionPredict[];
};

layout(std430, binding = 11) buffer ConstraintGradSquareSum {
    float constraintGradSquareSum[];
};

layout(std430, binding = 7) buffer NeighborCountPerParticle {
    uint neighborCountPerParticle[];
};

layout(std430, binding = 8) buffer NeighborIndexBuffer {
    uint neighborIndexBuffer[];
};

uniform float KERNEL_RADIUS;
uniform float MASS;
uniform float REST_DENSITY_REVERSE;
uniform float PI;
uniform uint MAX_NEIGHBOR_COUNT;
uniform uint PARTICLE_COUNT;

vec3 SpikyGradient(vec3 r, float h) {
    float r_mag = length(r);
    if (r_mag > h) {
        return vec3(0.0);
    }
    else {
        if (r_mag < 0.00001) {
            return vec3(0.0);
        }
        else {
            float fac1 = -45.0 / (PI * pow(h, 6));
            float fac2 = pow(h - r_mag, 2);
            return normalize(r) * fac1 * fac2;
        }
    }
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT) {
        return;
    }
    float squareSum = 0.0;
    vec3 constraintGrad_i = vec3(0.0);
    for (uint j = 0; j < neighborCountPerParticle[index]; j++) {
        uint neighborIndex = neighborIndexBuffer[index * MAX_NEIGHBOR_COUNT + j];
        vec3 constraintGrad_j = SpikyGradient(vec3(positionPredict[index]) - vec3(positionPredict[neighborIndex]), KERNEL_RADIUS);
        constraintGrad_j *= MASS * REST_DENSITY_REVERSE;
        squareSum += dot(constraintGrad_j, constraintGrad_j);
        constraintGrad_i += constraintGrad_j;
    }
    squareSum += dot(constraintGrad_i, constraintGrad_i);
    constraintGradSquareSum[index] = squareSum;
}
