#version 430 core

layout(local_size_x = 256) in;

layout(std430, binding = 1) buffer PositionPredict {
    vec4 positionPredict[];
};

layout(std430, binding = 3) buffer ParticleCountPerCube {
    uint particleCountPerCube[];
};

uniform float KERNEL_RADIUS;
uniform float HORIZON_MAX_COORDINATE;
uniform float MAX_HEIGHT;
uniform uint PARTICLE_COUNT;

int cubeCountXZ = int(ceil(HORIZON_MAX_COORDINATE / KERNEL_RADIUS));
int cubeCountY = int(ceil(MAX_HEIGHT / KERNEL_RADIUS));
ivec3 cubeIndexDot = ivec3(cubeCountXZ * cubeCountY, cubeCountXZ, 1);

ivec3 getCubeIndex(uint index) {
    vec3 positionInCube = (vec3(positionPredict[index]) + vec3(0.5 * HORIZON_MAX_COORDINATE, 0.0, 0.5 * HORIZON_MAX_COORDINATE)) / KERNEL_RADIUS;
    ivec3 indexInCube = ivec3(int(floor(positionInCube.x)), int(floor(positionInCube.y)), int(floor(positionInCube.z)));
    return indexInCube;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT) {
        return;
    }
    ivec3 indexInCube = getCubeIndex(index);
    int cubeIndex = int(dot(indexInCube, cubeIndexDot));
    atomicAdd(particleCountPerCube[cubeIndex], 1);
}

